import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from algorithm import Algorithm
from topology import Topology


df = pd.DataFrame(
    [
        {"command": "st.selectbox", "rating": 4, "is_widget": True},
        {"command": "st.balloons", "rating": 5, "is_widget": False},
        {"command": "st.time_input", "rating": 3, "is_widget": True},
    ]
)

col1, col2 = st.columns(2)

a, b = 0, 0

with col1:
    a_input = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')

with col2:
    b_input = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫')

a = int(a_input) if len(a_input) > 0 else a
b = int(b_input) if len(b_input) > 0 else b

index = list(map(str, range(1,a + 1)))
columns = list(map(str, range(1,b + 1)))
df = pd.DataFrame(index=index, columns=columns)

edited_df = st.data_editor(df) # üëà An editable dataframe
print(edited_df)

bt = st.button('–†–∞–Ω–¥–æ–º')
if bt:
    df = Topology().generate_topology(
        'test_123.csv', 
        size=(a, b))
    
    edited_df = st.dataframe(df)

print(edited_df)

crossover, selection, mutate, mode = st.columns(4)

with crossover:
    cr_alg = st.radio(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è',
        ['–û–¥–Ω–æ—Ç–æ—á–µ—á–Ω–æ–µ', '–ü—Ä—è–º–æ–µ']
    )

    if cr_alg == '–û–¥–Ω–æ—Ç–æ—á–µ—á–Ω–æ–µ':
        crossover_algorithm = Algorithm().one_point_crossover
    elif cr_alg == '–ü—Ä—è–º–æ–µ':
        crossover_algorithm = Algorithm().direct_crossover

    print(crossover_algorithm)

with selection:
    sc_alg = st.radio(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–±–æ—Ä–∞ –æ—Å–æ–±–µ–π',
        ['–†—É–ª–µ—Ç–∫–∞', '–¢—É—Ä–Ω–∏—Ä']
    )

    if sc_alg == '–†—É–ª–µ—Ç–∫–∞':
        selection_algorithm = Algorithm().roulette_selection
    else:
        selection_algorithm = Algorithm().tournament_selection

with mutate:
    mt_alg = st.radio(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –º—É—Ç–∞—Ü–∏–∏ –æ—Å–æ–±–µ–π',
        ['–û–±–º–µ–Ω –≤–µ—Ä—à–∏–Ω–∞–º–∏', '–†–∞–Ω–¥–æ–º–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞']
    )

    if mt_alg == '–û–±–º–µ–Ω –≤–µ—Ä—à–∏–Ω–∞–º–∏':
        mutate_algorithm = Algorithm().swap_mutate
    else:
        mutate_algorithm = Algorithm().random_mutate

with mode:
    mode_name = st.radio(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è',
        ['–ü–æ—à–∞–≥–æ–≤—ã–π', '–ü–æ–ª–Ω—ã–π']
    )

    if mode_name == '–ü–æ—à–∞–≥–æ–≤—ã–π':
        mode = 'step'
    else:
        mode = 'full'

@st.cache_resource
def load_model():
    pass


